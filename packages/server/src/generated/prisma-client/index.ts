// Code generated by Prisma (prisma@1.25.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  meetup: (where?: MeetupWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  meetup: (where: MeetupWhereUniqueInput) => MeetupPromise;
  meetups: (args?: {
    where?: MeetupWhereInput;
    orderBy?: MeetupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Meetup>;
  meetupsConnection: (args?: {
    where?: MeetupWhereInput;
    orderBy?: MeetupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MeetupConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createMeetup: (data: MeetupCreateInput) => MeetupPromise;
  updateMeetup: (args: {
    data: MeetupUpdateInput;
    where: MeetupWhereUniqueInput;
  }) => MeetupPromise;
  updateManyMeetups: (args: {
    data: MeetupUpdateManyMutationInput;
    where?: MeetupWhereInput;
  }) => BatchPayloadPromise;
  upsertMeetup: (args: {
    where: MeetupWhereUniqueInput;
    create: MeetupCreateInput;
    update: MeetupUpdateInput;
  }) => MeetupPromise;
  deleteMeetup: (where: MeetupWhereUniqueInput) => MeetupPromise;
  deleteManyMeetups: (where?: MeetupWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  meetup: (
    where?: MeetupSubscriptionWhereInput
  ) => MeetupSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MeetupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "location_ASC"
  | "location_DESC"
  | "date_ASC"
  | "date_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateWithoutMyMeetupsDataInput {
  email?: String;
  password?: String;
  name?: String;
  meetupsAttending?: MeetupUpdateManyWithoutAttendeesInput;
}

export type MeetupWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MeetupUpdateWithoutAttendeesDataInput {
  organizer?: UserUpdateOneRequiredWithoutMyMeetupsInput;
  title?: String;
  description?: String;
  location?: String;
  date?: DateTimeInput;
}

export interface MeetupWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  organizer?: UserWhereInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  location?: String;
  location_not?: String;
  location_in?: String[] | String;
  location_not_in?: String[] | String;
  location_lt?: String;
  location_lte?: String;
  location_gt?: String;
  location_gte?: String;
  location_contains?: String;
  location_not_contains?: String;
  location_starts_with?: String;
  location_not_starts_with?: String;
  location_ends_with?: String;
  location_not_ends_with?: String;
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[] | DateTimeInput;
  date_not_in?: DateTimeInput[] | DateTimeInput;
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  attendees_every?: UserWhereInput;
  attendees_some?: UserWhereInput;
  attendees_none?: UserWhereInput;
  AND?: MeetupWhereInput[] | MeetupWhereInput;
  OR?: MeetupWhereInput[] | MeetupWhereInput;
  NOT?: MeetupWhereInput[] | MeetupWhereInput;
}

export interface UserCreateWithoutMeetupsAttendingInput {
  email: String;
  password: String;
  name: String;
  myMeetups?: MeetupCreateManyWithoutOrganizerInput;
}

export interface MeetupUpdateWithWhereUniqueWithoutOrganizerInput {
  where: MeetupWhereUniqueInput;
  data: MeetupUpdateWithoutOrganizerDataInput;
}

export interface MeetupCreateManyWithoutOrganizerInput {
  create?:
    | MeetupCreateWithoutOrganizerInput[]
    | MeetupCreateWithoutOrganizerInput;
  connect?: MeetupWhereUniqueInput[] | MeetupWhereUniqueInput;
}

export interface MeetupUpsertWithWhereUniqueWithoutAttendeesInput {
  where: MeetupWhereUniqueInput;
  update: MeetupUpdateWithoutAttendeesDataInput;
  create: MeetupCreateWithoutAttendeesInput;
}

export interface MeetupCreateWithoutOrganizerInput {
  title: String;
  description: String;
  location: String;
  date: DateTimeInput;
  attendees?: UserCreateManyWithoutMeetupsAttendingInput;
}

export interface MeetupSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MeetupWhereInput;
  AND?: MeetupSubscriptionWhereInput[] | MeetupSubscriptionWhereInput;
  OR?: MeetupSubscriptionWhereInput[] | MeetupSubscriptionWhereInput;
  NOT?: MeetupSubscriptionWhereInput[] | MeetupSubscriptionWhereInput;
}

export interface MeetupUpdateInput {
  organizer?: UserUpdateOneRequiredWithoutMyMeetupsInput;
  title?: String;
  description?: String;
  location?: String;
  date?: DateTimeInput;
  attendees?: UserUpdateManyWithoutMeetupsAttendingInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  name?: String;
  myMeetups?: MeetupUpdateManyWithoutOrganizerInput;
  meetupsAttending?: MeetupUpdateManyWithoutAttendeesInput;
}

export interface UserUpdateOneRequiredWithoutMyMeetupsInput {
  create?: UserCreateWithoutMyMeetupsInput;
  update?: UserUpdateWithoutMyMeetupsDataInput;
  upsert?: UserUpsertWithoutMyMeetupsInput;
  connect?: UserWhereUniqueInput;
}

export interface MeetupUpdateManyMutationInput {
  title?: String;
  description?: String;
  location?: String;
  date?: DateTimeInput;
}

export interface MeetupUpsertWithWhereUniqueWithoutOrganizerInput {
  where: MeetupWhereUniqueInput;
  update: MeetupUpdateWithoutOrganizerDataInput;
  create: MeetupCreateWithoutOrganizerInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface MeetupUpdateManyWithoutAttendeesInput {
  create?:
    | MeetupCreateWithoutAttendeesInput[]
    | MeetupCreateWithoutAttendeesInput;
  delete?: MeetupWhereUniqueInput[] | MeetupWhereUniqueInput;
  connect?: MeetupWhereUniqueInput[] | MeetupWhereUniqueInput;
  disconnect?: MeetupWhereUniqueInput[] | MeetupWhereUniqueInput;
  update?:
    | MeetupUpdateWithWhereUniqueWithoutAttendeesInput[]
    | MeetupUpdateWithWhereUniqueWithoutAttendeesInput;
  upsert?:
    | MeetupUpsertWithWhereUniqueWithoutAttendeesInput[]
    | MeetupUpsertWithWhereUniqueWithoutAttendeesInput;
  deleteMany?: MeetupScalarWhereInput[] | MeetupScalarWhereInput;
  updateMany?:
    | MeetupUpdateManyWithWhereNestedInput[]
    | MeetupUpdateManyWithWhereNestedInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface MeetupUpdateWithWhereUniqueWithoutAttendeesInput {
  where: MeetupWhereUniqueInput;
  data: MeetupUpdateWithoutAttendeesDataInput;
}

export interface UserCreateOneWithoutMyMeetupsInput {
  create?: UserCreateWithoutMyMeetupsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  myMeetups_every?: MeetupWhereInput;
  myMeetups_some?: MeetupWhereInput;
  myMeetups_none?: MeetupWhereInput;
  meetupsAttending_every?: MeetupWhereInput;
  meetupsAttending_some?: MeetupWhereInput;
  meetupsAttending_none?: MeetupWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface MeetupCreateManyWithoutAttendeesInput {
  create?:
    | MeetupCreateWithoutAttendeesInput[]
    | MeetupCreateWithoutAttendeesInput;
  connect?: MeetupWhereUniqueInput[] | MeetupWhereUniqueInput;
}

export interface MeetupUpdateWithoutOrganizerDataInput {
  title?: String;
  description?: String;
  location?: String;
  date?: DateTimeInput;
  attendees?: UserUpdateManyWithoutMeetupsAttendingInput;
}

export interface UserCreateManyWithoutMeetupsAttendingInput {
  create?:
    | UserCreateWithoutMeetupsAttendingInput[]
    | UserCreateWithoutMeetupsAttendingInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface MeetupScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  location?: String;
  location_not?: String;
  location_in?: String[] | String;
  location_not_in?: String[] | String;
  location_lt?: String;
  location_lte?: String;
  location_gt?: String;
  location_gte?: String;
  location_contains?: String;
  location_not_contains?: String;
  location_starts_with?: String;
  location_not_starts_with?: String;
  location_ends_with?: String;
  location_not_ends_with?: String;
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[] | DateTimeInput;
  date_not_in?: DateTimeInput[] | DateTimeInput;
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  AND?: MeetupScalarWhereInput[] | MeetupScalarWhereInput;
  OR?: MeetupScalarWhereInput[] | MeetupScalarWhereInput;
  NOT?: MeetupScalarWhereInput[] | MeetupScalarWhereInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
  name?: String;
}

export interface MeetupUpdateManyWithWhereNestedInput {
  where: MeetupScalarWhereInput;
  data: MeetupUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  email?: String;
  password?: String;
  name?: String;
}

export interface MeetupUpdateManyDataInput {
  title?: String;
  description?: String;
  location?: String;
  date?: DateTimeInput;
}

export interface UserUpsertWithWhereUniqueWithoutMeetupsAttendingInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutMeetupsAttendingDataInput;
  create: UserCreateWithoutMeetupsAttendingInput;
}

export interface UserUpsertWithoutMyMeetupsInput {
  update: UserUpdateWithoutMyMeetupsDataInput;
  create: UserCreateWithoutMyMeetupsInput;
}

export interface UserCreateWithoutMyMeetupsInput {
  email: String;
  password: String;
  name: String;
  meetupsAttending?: MeetupCreateManyWithoutAttendeesInput;
}

export interface MeetupUpdateManyWithoutOrganizerInput {
  create?:
    | MeetupCreateWithoutOrganizerInput[]
    | MeetupCreateWithoutOrganizerInput;
  delete?: MeetupWhereUniqueInput[] | MeetupWhereUniqueInput;
  connect?: MeetupWhereUniqueInput[] | MeetupWhereUniqueInput;
  disconnect?: MeetupWhereUniqueInput[] | MeetupWhereUniqueInput;
  update?:
    | MeetupUpdateWithWhereUniqueWithoutOrganizerInput[]
    | MeetupUpdateWithWhereUniqueWithoutOrganizerInput;
  upsert?:
    | MeetupUpsertWithWhereUniqueWithoutOrganizerInput[]
    | MeetupUpsertWithWhereUniqueWithoutOrganizerInput;
  deleteMany?: MeetupScalarWhereInput[] | MeetupScalarWhereInput;
  updateMany?:
    | MeetupUpdateManyWithWhereNestedInput[]
    | MeetupUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithoutMeetupsAttendingDataInput {
  email?: String;
  password?: String;
  name?: String;
  myMeetups?: MeetupUpdateManyWithoutOrganizerInput;
}

export interface UserUpdateWithWhereUniqueWithoutMeetupsAttendingInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutMeetupsAttendingDataInput;
}

export interface UserUpdateManyWithoutMeetupsAttendingInput {
  create?:
    | UserCreateWithoutMeetupsAttendingInput[]
    | UserCreateWithoutMeetupsAttendingInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutMeetupsAttendingInput[]
    | UserUpdateWithWhereUniqueWithoutMeetupsAttendingInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutMeetupsAttendingInput[]
    | UserUpsertWithWhereUniqueWithoutMeetupsAttendingInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface MeetupCreateWithoutAttendeesInput {
  organizer: UserCreateOneWithoutMyMeetupsInput;
  title: String;
  description: String;
  location: String;
  date: DateTimeInput;
}

export interface MeetupCreateInput {
  organizer: UserCreateOneWithoutMyMeetupsInput;
  title: String;
  description: String;
  location: String;
  date: DateTimeInput;
  attendees?: UserCreateManyWithoutMeetupsAttendingInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserCreateInput {
  email: String;
  password: String;
  name: String;
  myMeetups?: MeetupCreateManyWithoutOrganizerInput;
  meetupsAttending?: MeetupCreateManyWithoutAttendeesInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface MeetupSubscriptionPayload {
  mutation: MutationType;
  node: Meetup;
  updatedFields: String[];
  previousValues: MeetupPreviousValues;
}

export interface MeetupSubscriptionPayloadPromise
  extends Promise<MeetupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MeetupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MeetupPreviousValuesPromise>() => T;
}

export interface MeetupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MeetupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MeetupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MeetupPreviousValuesSubscription>() => T;
}

export interface MeetupPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  location: String;
  date: DateTimeOutput;
}

export interface MeetupPreviousValuesPromise
  extends Promise<MeetupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  location: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
}

export interface MeetupPreviousValuesSubscription
  extends Promise<AsyncIterator<MeetupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Meetup {
  id: ID_Output;
  title: String;
  description: String;
  location: String;
  date: DateTimeOutput;
}

export interface MeetupPromise extends Promise<Meetup>, Fragmentable {
  id: () => Promise<ID_Output>;
  organizer: <T = UserPromise>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  location: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  attendees: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MeetupSubscription
  extends Promise<AsyncIterator<Meetup>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  organizer: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  attendees: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  myMeetups: <T = FragmentableArray<Meetup>>(args?: {
    where?: MeetupWhereInput;
    orderBy?: MeetupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  meetupsAttending: <T = FragmentableArray<Meetup>>(args?: {
    where?: MeetupWhereInput;
    orderBy?: MeetupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  myMeetups: <T = Promise<AsyncIterator<MeetupSubscription>>>(args?: {
    where?: MeetupWhereInput;
    orderBy?: MeetupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  meetupsAttending: <T = Promise<AsyncIterator<MeetupSubscription>>>(args?: {
    where?: MeetupWhereInput;
    orderBy?: MeetupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MeetupConnection {
  pageInfo: PageInfo;
  edges: MeetupEdge[];
}

export interface MeetupConnectionPromise
  extends Promise<MeetupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MeetupEdge>>() => T;
  aggregate: <T = AggregateMeetupPromise>() => T;
}

export interface MeetupConnectionSubscription
  extends Promise<AsyncIterator<MeetupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MeetupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMeetupSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface MeetupEdge {
  node: Meetup;
  cursor: String;
}

export interface MeetupEdgePromise extends Promise<MeetupEdge>, Fragmentable {
  node: <T = MeetupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MeetupEdgeSubscription
  extends Promise<AsyncIterator<MeetupEdge>>,
    Fragmentable {
  node: <T = MeetupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMeetup {
  count: Int;
}

export interface AggregateMeetupPromise
  extends Promise<AggregateMeetup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMeetupSubscription
  extends Promise<AsyncIterator<AggregateMeetup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Meetup",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://us1.prisma.sh/ryan-yogan/techies/dev`
});
export const prisma = new Prisma();
