// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Meetup, User } from "./prisma-client";
import { AuthPayload, Context } from "../types";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsMeetup {
    id: string;
  }

  export type MeetupsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Meetup[] | Promise<Meetup[]>;

  export type MeetupResolver = (
    parent: undefined,
    args: ArgsMeetup,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Meetup | Promise<Meetup>;

  export type MeResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export interface Type {
    meetups: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Meetup[] | Promise<Meetup[]>;

    meetup: (
      parent: undefined,
      args: ArgsMeetup,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Meetup | Promise<Meetup>;

    me: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;
  }
}

export namespace MeetupResolvers {
  export const defaultResolvers = {
    id: (parent: Meetup) => parent.id,
    title: (parent: Meetup) => parent.title,
    description: (parent: Meetup) => parent.description,
    location: (parent: Meetup) => parent.location,
    date: (parent: Meetup) => parent.date,
  };

  export type IdResolver = (
    parent: Meetup,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type OrganizerResolver = (
    parent: Meetup,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type TitleResolver = (
    parent: Meetup,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DescriptionResolver = (
    parent: Meetup,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type LocationResolver = (
    parent: Meetup,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DateResolver = (
    parent: Meetup,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type AttendeesResolver = (
    parent: Meetup,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>;

  export interface Type {
    id: (
      parent: Meetup,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    organizer: (
      parent: Meetup,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    title: (
      parent: Meetup,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    description: (
      parent: Meetup,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    location: (
      parent: Meetup,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    date: (
      parent: Meetup,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    attendees: (
      parent: Meetup,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | Promise<User[]>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => parent.email,
    name: (parent: User) => parent.name,
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type MyMeetupsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Meetup[] | Promise<Meetup[]>;

  export type MeetupsAttendingResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Meetup[] | Promise<Meetup[]>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    myMeetups: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Meetup[] | Promise<Meetup[]>;

    meetupsAttending: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Meetup[] | Promise<Meetup[]>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsSignup {
    email: string;
    password: string;
    name: string;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export interface ArgsCreateMeetup {
    title: string;
    description: string;
    date: string;
    location: string;
  }

  export interface ArgsAttending {
    id: string;
  }

  export interface ArgsNotAttending {
    id: string;
  }

  export type SignupResolver = (
    parent: undefined,
    args: ArgsSignup,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  export type LoginResolver = (
    parent: undefined,
    args: ArgsLogin,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  export type CreateMeetupResolver = (
    parent: undefined,
    args: ArgsCreateMeetup,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Meetup | Promise<Meetup>;

  export type AttendingResolver = (
    parent: undefined,
    args: ArgsAttending,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Meetup | Promise<Meetup>;

  export type NotAttendingResolver = (
    parent: undefined,
    args: ArgsNotAttending,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Meetup | Promise<Meetup>;

  export interface Type {
    signup: (
      parent: undefined,
      args: ArgsSignup,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>;

    login: (
      parent: undefined,
      args: ArgsLogin,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>;

    createMeetup: (
      parent: undefined,
      args: ArgsCreateMeetup,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Meetup | Promise<Meetup>;

    attending: (
      parent: undefined,
      args: ArgsAttending,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Meetup | Promise<Meetup>;

    notAttending: (
      parent: undefined,
      args: ArgsNotAttending,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Meetup | Promise<Meetup>;
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) => parent.token,
    user: (parent: AuthPayload) => parent.user,
  };

  export type TokenResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export interface Type {
    token: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    user: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Meetup: MeetupResolvers.Type;
  User: UserResolvers.Type;
  Mutation: MutationResolvers.Type;
  AuthPayload: AuthPayloadResolvers.Type;
}
